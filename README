Author: Jason Callow, Student ID: 32987667
Class: ICT171
Assignment: Assignment 2 - Cloud Project
Website URL: https://jason-murdoch.online/

#DNS AND SSL/TLS CERTIFICATION

##DNS

I used NameCheap.com to register my Domain. I used it because it's incredibly for the type of DNS I chose (.online) as well as being reliable. Pointing
the domain name to the VM IP adress was incredibly easy, and was usually updated and working within minutes.

The process was as easy as:
1. Sign up for namecheap
2. Purchase a domain (mine cost AUD$1.16 for a year)
3. Navigate to the "Domain" tab in your account 
4. Click your newly purchased domain's 'manage' button
5. Select 'Advanced DNS' Tab
6. Edit the IP of your domain by clicking it once, press enter to accept
7. Wait a few minutes
8. Done!

##SSL/TLS CERTIFICATION

For these certifications, I used CertBot by LetsEncrypt. It is vital to have these certificates in the modern internet landscape, as most 
devices simply won't work without them. To get this up and running, The DNS needs to be properly set up as well as having Apache2 running 
on your Ubuntu server device. The server also needs port 80 (HTTP), 443 (HTTPS) and port 22 (SSH) open. Opening these ports can be done in a 
variety of ways depending on your server medium, but for me using an Ubuntu VM through Microsoft Azure, it was as simple as configuring the
network security options in the Microsoft Azure dashboard.

1. SSH into the server
2. Install snapd with the commands:
	- sudo apt update
	- sudo apt install snapd
3. Install CertBot with:
	- sudo apt install --classic certbot
4. Execute the following instruction to ensure the 'certbot' command can be run:
	- sudo ln -s /snap/bin/certbot /usr/bin/certbot
5. Get and Install certificates for Apache:
	-sudo certbot --apache
6. Test automatic renewalwith:
	- sudo certbot renew --dry-run
- This should show that certbot is installed in one of the following three directories:

    /etc/crontab/
    /etc/cron.*/*
    systemctl list-timers

8. Test that Certbot is working by navigating to your your website in the browser of your choice, you should see that your website
   is working with HTTPS certifications!

---

My website has been built using a template, Big picture by HTML5up. This frame work has been greatly expanded upon using various index.html, 
main.css and main.js edits as well as changes to the aesthetics and feel of the website. I also made much more complicated edits, such as 
adding a splash screen and completely reworking the gallery. I will walk through the changes made, working from the most basic to the most 
complicated.

---

#FEATURES

- **Basic Text Editing
- **Category filter buttons** (Wildlife, Landscapes, People, All)
- **Easy to add more images** via JavaScript arrays
- **Tab text (browser title) easily changed**
- **Modern, minimal styling**

---

#TAB TEXT EDIT

The first, simplest changes that I made to the website were to the overall aesthetics. The background images used on each page, the text 
included in the various artist profile sections, the tab text were all very easy to edit in the index.html file within the following code blocks:

## TAB TEXT

- Very simple edit made to change to tab text. In index.html simply navigating to the <title></title> child under the <html> -> <head> parents
  allows for editing this.

'''index.html
<head>
	<title>Callow & Co.</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="assets/css/main.css" />
	<noscript><link rel="stylesheet" href="assets/css/noscript.css" /></noscript>
</head>

---

## INTRO SCREEN TEXT EDIT

- Again, just very simple text editing from the placeholder text in index.html

- For the actual content of the text, the white text between <p> and </p> is what I edited, however you will also notice that I have 
  changed the colour of the text. This was achieved with style=”color: rgba(0, 0, 0, 0.717);” added to the content of <p>. In Visual 
  Studio Code (VSCode), this adds a small square displaying the currently selected colour which can be clicked on to bring up an 
  interactive colour scale that can be used to select colours with specificity, without the need to use trial and error editing the rgba 
  content.

- Notice the <strong> function, which makes the text encapsulated bold, also has a colour modification.

'''index.html
<!-- Intro -->
	<section id="intro" class="main style1 dark fullscreen">
		<div class="content">
			<header>
				<h2 style="color: rgba(0, 0, 0, 0.717);">Callow & Co.</h2>
			</header>
			<p style="color: rgba(0, 0, 0, 0.717);">Welcome to <strong style="color: rgba(0, 0, 0, 0.717);">
				Callow & Co,</strong> a family owned, Perth based photography business <br />
			specializing in Portrait, Landscape and Wildlife photography.</p>
			<footer>

---

## GALLERY LAYOUT AND STYLING

-- The following code ensures 4 columns on desktop, and 3, 2 or 1 on smaller screens
-- Padding creates vertical space between thumbnails
-- The container holding the thumbnails is centered and adapts to screen size

```css
#dynamic-gallery {
    width: 100%;
    max-width: 1600px;
    margin: 0 auto;
    box-sizing: border-box;
}
#dynamic-gallery article {
    float: left;
    width: 25%;            /* 4 columns */
    box-sizing: border-box;
    padding: 10px;         /* gap between thumbnails */
}
#dynamic-gallery:after {
    content: "";
    display: table;
    clear: both;
}

/* Responsive breakpoints */
@media screen and (max-width: 900px) {
    #dynamic-gallery article { width: 33.33%; }
}
@media screen and (max-width: 600px) {
    #dynamic-gallery article { width: 50%; }
}
@media screen and (max-width: 400px) {
    #dynamic-gallery article { width: 100%; }
}

## CATEGORY FILTER BUTTONS

-- Centers button text horizontally
-- Buttons have rounded corners and bold text

```css
#gallery-filters button {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 2.5em;
    padding: 0.5em 1.2em;
    margin: 0.2em;
    background-color: #000000;
    color: white;
    border: none;
    border-radius: 1em;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.2s;
}

---

#CHANGING BACKGROUND IMAGES

- Changing the background Image to suit the theme of my project is a fairly simple task. By adding relevant images to the 'assets' folder of my 
  /html directory, I was able to use the following script to point to the images: 

/* Intro */

	#intro {
		background: url("images/overlay.png"), url("../../images/Fleur_Bridge.jpg");
		background-size: 256px 256px, cover;
		background-attachment: fixed, fixed;
		background-position: top left, bottom center;
		background-repeat: repeat, no-repeat;
	}

/* One */

	#one {
		background: url("images/overlay.png"), url("../../images/land6.jpg");
		background-size: 256px 256px, cover;
		background-attachment: fixed, fixed;
		background-position: top left, center center;
	}

/* Two */

	#two {
		background: url("images/overlay.png"), url("../../images/Giraffe.jpg");
		background-size: 256px 256px, cover;
		background-attachment: fixed, fixed;
		background-position: top left, center center;
	}

---

## ADDING MORE IMAGES TO THE GALLERY

- The template had no catagories set, so I had to add my own using the following syntax in the Javascript. This allowed me to easily
  expand and catagorise the images neatly
- These files were added into the /thumb and /fulls folders in my /assets directory respectively

```JavaScript
// STEP 1: Store image paths per category
const galleryImages = {
  wildlife: [
    { thumb: "images/thumbs/wildlife1.jpg", full: "images/fulls/wildlife1.jpg", title: "Buddy" },
    { thumb: "images/thumbs/wildlife2.jpg", full: "images/fulls/wildlife2.jpg", title: "Fluffy" },
	{ thumb: "images/thumbs/wildlife3.jpg", full: "images/fulls/wildlife3.jpg", title: "Whiskers" },
	{ thumb: "images/thumbs/wildlife4.jpg", full: "images/fulls/wildlife4.jpg", title: "Shadow" },
	{ thumb: "images/thumbs/wildlife5.jpg", full: "images/fulls/wildlife5.jpg", title: "Mittens" },
	{ thumb: "images/thumbs/wildlife6.jpg", full: "images/fulls/wildlife6.jpg", title: "Socks" },
	{ thumb: "images/thumbs/wildlife7.jpg", full: "images/fulls/wildlife7.jpg", title: "Paws" },
	{ thumb: "images/thumbs/wildlife8.jpg", full: "images/fulls/wildlife8.jpg", title: "Coco" },
	{ thumb: "images/thumbs/wildlife9.jpg", full: "images/fulls/wildlife9.jpg", title: "Bella" },
	{ thumb: "images/thumbs/wildlife10.jpg", full: "images/fulls/wildlife10.jpg", title: "Leo" },
	{ thumb: "images/thumbs/wildlife11.jpg", full: "images/fulls/wildlife11.jpg", title: "Max" },
	{ thumb: "images/thumbs/wildlife12.jpg", full: "images/fulls/wildlife12.jpg", title: "Luna" }
  ],
  landscapes: [
    { thumb: "images/thumbs/land1.jpg", full: "images/fulls/land1.jpg", title: "Sunset Ridge" },
    { thumb: "images/thumbs/land2.jpg", full: "images/fulls/land2.jpg", title: "Forest Trail" },
	{ thumb: "images/thumbs/land3.jpg", full: "images/fulls/land3.jpg", title: "Mountain Peak" },
	{ thumb: "images/thumbs/land4.jpg", full: "images/fulls/land4.jpg", title: "Ocean View" },
	{ thumb: "images/thumbs/land5.jpg", full: "images/fulls/land5.jpg", title: "Desert Dunes" },
	{ thumb: "images/thumbs/land6.jpg", full: "images/fulls/land6.jpg", title: "River Bend" },
	{ thumb: "images/thumbs/land7.jpg", full: "images/fulls/land7.jpg", title: "Rolling Hills" },
	{ thumb: "images/thumbs/land8.jpg", full: "images/fulls/land8.jpg", title: "Autumn Forest" },
	{ thumb: "images/thumbs/land9.jpg", full: "images/fulls/land9.jpg", title: "Snowy Mountains" },
	{ thumb: "images/thumbs/land10.jpg", full: "images/fulls/land10.jpg", title: "Lakeside" },
	{ thumb: "images/thumbs/land11.jpg", full: "images/fulls/land11.jpg", title: "City Skyline" },
	{ thumb: "images/thumbs/land12.jpg", full: "images/fulls/land12.jpg", title: "Starry Night" }
  ],
  people: [
  { thumb: "images/thumbs/people1.jpg", full: "images/fulls/people1.jpg", title: "Wedding Day" },
  { thumb: "images/thumbs/people2.jpg", full: "images/fulls/people2.jpg", title: "Graduation" },
  { thumb: "images/thumbs/people3.jpg", full: "images/fulls/people3.jpg", title: "Family Portrait" },
  { thumb: "images/thumbs/people4.jpg", full: "images/fulls/people4.jpg", title: "Friends Gathering" },
  { thumb: "images/thumbs/people5.jpg", full: "images/fulls/people5.jpg", title: "Birthday Celebration" },
  { thumb: "images/thumbs/people6.jpg", full: "images/fulls/people6.jpg", title: "Candid Moment" },
  { thumb: "images/thumbs/people7.jpg", full: "images/fulls/people7.jpg", title: "Outdoor Fun" },
  { thumb: "images/thumbs/people8.jpg", full: "images/fulls/people8.jpg", title: "City Life" },
  { thumb: "images/thumbs/people9.jpg", full: "images/fulls/people9.jpg", title: "Cultural Event" },
  { thumb: "images/thumbs/people10.jpg", full: "images/fulls/people10.jpg", title: "Festival Vibes" },
  { thumb: "images/thumbs/people11.jpg", full: "images/fulls/people11.jpg", title: "Sporting Event" },
  { thumb: "images/thumbs/people12.jpg", full: "images/fulls/people12.jpg", title: "Concert Night" }
]

};

- I have a function of my 'All' catagory which enables the user to click it as many times as they want, and they will get a random selection 
  of any 12 images from across all catagories. The script is as follows:

```Javascript
// Add 'all' as a combined version
galleryImages.all = [
  ...galleryImages.wildlife,
  ...galleryImages.landscapes,
  ...galleryImages.people
];

// STEP 2: Function to render images into #dynamic-gallery
function renderGallery(category) {
  const container = document.getElementById('dynamic-gallery');
  container.innerHTML = '';

  let imagesToShow;

  if (category === 'all') {
    // Shuffle and select 6 random images
    imagesToShow = [...galleryImages.all];
    for (let i = imagesToShow.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [imagesToShow[i], imagesToShow[j]] = [imagesToShow[j], imagesToShow[i]];
    }
    imagesToShow = imagesToShow.slice(0, 12);
  } else {
    imagesToShow = galleryImages[category].slice(0, 12); // Only first 6 from category
  }

  imagesToShow.forEach(img => {
    const article = document.createElement('article');
    article.innerHTML = `
      <a href="${img.full}" class="image fit">
        <img src="${img.thumb}" title="${img.title}" alt="${img.title}">
      </a>
    `;
    container.appendChild(article);
  });

---

## SPLASH SCREEN 

- Adding a splash screen upon the website loading was another important addition for me to show both creativity and understanding
  of Javascript in a way that fits the website brief.
- Upon loading up the website, this loads up a black screen over the whole page, upon which "Callow & Co." is typed sequentially
  before it lifts to reveal the page in its entireity.
- To add this, it took additions to both CSS and JavaScript rowarsd the end of the scripts. Script as follows:

```CSS
#splash-screen {
  position: fixed;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  transition: opacity 1s ease;
}

#splash-screen.fade-out {
  opacity: 0;
  pointer-events: none;
}

#splash-title {
  font-size: 5em; /* 4× original */
  font-weight: bold;
  letter-spacing: 0.1em;
  text-align: center;
}

#splash-title span {
  opacity: 0;
  display: inline-block;
  animation: fadeInLetter 0.5s forwards;
}

/* Each letter fades in at an offset (spaced over 4s total) */
#splash-title span:nth-child(1)  { animation-delay: 0.0s; }
#splash-title span:nth-child(2)  { animation-delay: 0.4s; }
#splash-title span:nth-child(3)  { animation-delay: 0.8s; }
#splash-title span:nth-child(4)  { animation-delay: 1.2s; }
#splash-title span:nth-child(5)  { animation-delay: 1.6s; }
#splash-title span:nth-child(6)  { animation-delay: 2.0s; }
#splash-title span:nth-child(7)  { animation-delay: 2.01s; }
#splash-title span:nth-child(8)  { animation-delay: 2.4s; }
#splash-title span:nth-child(9)  { animation-delay: 2.41s; }
#splash-title span:nth-child(10) { animation-delay: 2.8s; }
#splash-title span:nth-child(11) { animation-delay: 3.2s; }
#splash-title span:nth-child(12) { animation-delay: 3.6s; }

@keyframes fadeInLetter {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

```index.html
 //Splash Screen -->
<div id="splash-screen">
  <h1 id="splash-title">
    <span>C</span><span>a</span><span>l</span><span>l</span><span>o</span><span>w</span>
    <span> </span><span>&</span><span> </span><span>C</span><span>o</span><span>.</span>
  </h1>
</div>

```Javascript
document.addEventListener('DOMContentLoaded', function () {
  const splash = document.getElementById('splash-screen');

// Splash Screen timout timer
  setTimeout(() => {
    splash.classList.add('fade-out');
  }, 4000);
});
